name: Automatic Archive Sync and Stale Branch Cleanup

on:
  push:
    # 어떤 브랜치든 푸시될 때 실행
    branches:
      - '**'

jobs:
  # 1. RpgArchieve로 전체 이력을 미러링 동기화하는 작업
  sync_to_archive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout RpgPlugin Repository (Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.ARCHIVE_TOKEN }}

      - name: Configure Git for Mirror Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "action@github.com"
          
          # 💡 수정된 부분: 리포지토리 이름(RpgArchieve)과 소유자 이름(YuThhh)을 정확하게 수정
          git remote add archive-remote https://x-access-token:${{ secrets.ARCHIVE_TOKEN }}@github.com/YuThhh/RpgArchieve.git
          
      - name: Execute Mirror Push to RpgArchieve
        run: |
          # 미러링 푸시 (PAT에 workflow 권한 필요)
          git push archive-remote --mirror
          
  # 2. 오래된 브랜치를 삭제하는 작업 (sync_to_archive 작업 성공 후 실행)
 # 2. 오래된 브랜치를 삭제하는 작업 (clean_stale_branches 작업)
  clean_stale_branches:
    runs-on: ubuntu-latest
    needs: [sync_to_archive]
    
    # 🔑 추가할 부분: 이 작업이 리포지토리 콘텐츠에 쓰기 권한을 가지도록 명시
    permissions:
      contents: write # 이 설정을 추가해야 브랜치 삭제가 가능합니다.
      
    steps:
      - name: Checkout RpgPlugin Repository (Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 이력 가져오기

      - name: Calculate and Delete Stale Branches
        env:
          # 기준 브랜치 이름 (main이라면 main으로 수정하세요)
          BASE_BRANCH: master 
          COMMIT_THRESHOLD: 50 # 50 커밋 이상 뒤처지면 삭제
        run: |
          echo "Start checking branches against ${BASE_BRANCH}..."
          
          # 원격 추적 브랜치 목록을 가져와 master/main 브랜치와 HEAD 추적 브랜치를 제외합니다.
          git branch -r | grep 'origin/' | grep -v '\->' | sed 's/origin\///' | grep -E -v "^(${BASE_BRANCH}|main)$" | while read branch_name; do
            
            # 💡 git rev-list origin/브랜치이름..origin/기준브랜치 --count 로 커밋 뒤처짐 정도를 계산합니다.
            COMMITS_BEHIND=$(git rev-list origin/${branch_name}..origin/${BASE_BRANCH} --count) 
            
            echo "🔍 Branch: ${branch_name} (Behind ${BASE_BRANCH}: ${COMMITS_BEHIND} commits)"
            
            # 뒤처진 커밋 수가 임계치(50) 이상일 경우
            if [ ${COMMITS_BEHIND} -ge ${COMMIT_THRESHOLD} ]; then
              echo "🗑️ Deleting stale branch: ${branch_name} (${COMMITS_BEHIND} commits behind ${BASE_BRANCH})"
              
              # 원격 리포지토리 (origin = RpgPlugin)에서 브랜치 삭제
              git push origin --delete "${branch_name}"
              
              if [ $? -eq 0 ]; then
                echo "✅ Branch ${branch_name} successfully deleted from origin (RpgPlugin)."
              else
                echo "❌ Failed to delete branch ${branch_name}."
              fi
            fi
          done
